#pragma once
#define LINE_QUANTITY 20
#include <cstring>
#include <iostream>

namespace Dungeon{


typedef struct square{
    std::string lines[LINE_QUANTITY];
} square;

square map_catalog[3] = {
    {},
    {"########################################", "###########...&......#....&............<", "###########..........+..................", "###########....#######........##########", "########################......#........#", "##############.....&...#......+.......&#", "##############.........#......#........#", ">............#.........#......##########", ".............#.........#......#..&....##", "###########..#.........#......#.......##", "###########..#####+#####......+.......##", "##.&..#####...................#.......##", "##....#####...................##########", "##....######+##############+############", "###..#######.##########.&.......########", "###..###.....##########.........########", "###..&.......##########........&########", "###..........##########.........########", "###.....###############.&.......########", "########################################"},
    {}};

typedef enum level_numbers {LEVEL_1, LEVEL_2, LEVEL_3} level_numbers;

}

